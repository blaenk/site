---
title = "Unreal Engine"
published = "December 17, 2016"
comments = false
---

Unreal Engine is an industry grade, robust game engine. While previous engines offered UnrealScript for implementing new behavior, Unreal Engine 4 uses C++ exclusively along with visual programming "Blueprints" that are generate C++.

<toc/>

# Editor

Pressing <kbd>F</kbd> in the camera pane will move the camera to focus onto the selected object.

Pressing and holding <kbd>ALT</kbd> while dragging left-click will orbit the focused object, while dragging right-click will zoom in and out of the object.

Geometry brushes have built-in behavior for collision, tessellation, and material tiling. They are used to "block out" an environment and then they are converted to static meshes.

A brush face can be selected by holding <kbd>CTRL</kbd> + <kbd>SHIFT</kbd> + left-click on a face. All faces can then be selected by going to the _Geometry_ drop-down and selecting _Select all adjacent faces_.

Objects such as brushes can be duplicated by copy-pasting or by holding <kbd>ALT</kbd> while transforming the object.

Physics simulation can be enabled for an object by going to its _Physics_ section of the _Details_ panel and ticking the _Simulate Physics_ checkbox.

The physics of an object can be constrained to specific planes, such as the YZ-plane, by using the _Constraints_ field in the _Physics_ section of the _Details_ panel.

A _trigger volume_ is one that emits an event if an actor collides with it.

# Directory Structure

A project contains the following directory structure as well as the Unreal Project File <span class="path">.uproject</span> which can be opened in the Unreal Editor.

Assets are stored as <span class="path">.uasset</span> files in the Content folder, and can include Materials, Static and Skeletal Meshes, Blueprints, Sound Cues, Textures, and reusable reference materials and templates.

maps are stored as <span class="path">.umap</span> files within the Content folder. The Unreal Editor works with one map at a time, which is displayed in the Viewport.

The root directory contains the following directories as well as a directory for each game project:

* <span class="path">Engine</span>: engine source, content, etc.
* <span class="path">Templates</span>: project templates
* <span class="path">GenerateProjectFiles.bat</span>: creates UE4 Visual Studio solution
* <span class="path">UE4Games.uprojectdirs</span>: tells UnrealBuildTool where to find projects

Both the Engine and game project directories have some directories in common:

* <span class="path">Binaries</span>: built binaries and other built objects
* <span class="path">Build</span>: build files
* <span class="path">Config</span>: configuration files for engine settings. Those in game project configuration files override those in the Engine directory.
* <span class="path">Content</span>: engine and game content, including asset packages and maps
* <span class="path">DerivedDataCache</span>: cached derived data files generated on-load
* <span class="path">Intermediate</span>: temporary build files, such as shaders in game directories
* <span class="path">Saved</span>: autosaves, configuration files, and logs. The Engine's directory also contains crash logs, hardware information, and more.
* <span class="path">Source</span>: contains engine and game source, tools, gameplay classes, etc.
    * <span class="path">Engine</span>:
        * <span class="path">Developer</span>: source common to editor and engine
        * <span class="path">Editor</span>: editor source
        * <span class="path">Programs</span>: external tools used by engine and editor
        * <span class="path">Runtime</span>: engine source
    * <span class="path">Game</span>: organized with a directory per module, each containing:
        * <span class="path">Classes</span>: gameplay class headers (.h)
        * <span class="path">Private</span>: gameplay class and module implementations (.cpp)
        * <span class="path">Public</span>: module header

The <span class="path">Engine</span> directory also contains:

* <span class="path">Documentation</span>: source markdown and published HTML documentation
* <span class="path">Extras</span>: helper and utility files
* <span class="path">Plugins</span>: engine plugins
* <span class="path">Programs</span>: configuration files and logs for root projects such as UnrealFrontEnd and UnrealHeaderTool
* <span class="path">Shaders</span>: shader source files (.usf)

Each game project directory contains:

* <span class="path">Binaries</span>: built binaries
* <span class="path">Config: </span>default game settings
* <span class="path">Content:</span> engine or game content, including asset packages and maps
* <span class="path">External dependencies</span>: public engine headers (Visual Studio)
* <span class="path">Intermediate</span>: files generated by UnrealBuildTool such as Visual Studio projects
* <span class="path">Saved</span>: configuration files and logs
* <span class="path">Source</span>:
    * <span class="path">Classes</span>: game object class definitions (.h)
    * <span class="path">Private</span>: private game object class implementations (.cpp)
    * <span class="path">Public</span>: public game object class implementations (.cpp)

Solution directories contain:

* <span class="path">Classes</span>: game object class definitions (.h)
* <span class="path">Config</span>: default game settings
* <span class="path">External dependencies</span>: public engine headers (Visual Studio)
* <span class="path">Private</span>: private game object class implementations (.cpp)
* <span class="path">Public</span>: public game object class implementations (.cpp)

